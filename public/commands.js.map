{"version":3,"file":"commands.js","mappings":"YAEA,IAIIA,EAGJC,OAAOC,SAAQ,WACPF,EAAcC,OAAOE,QAAQC,QAAQC,IACzC,IAoBJJ,OAAOK,QAAQC,UAAU,uBAfzB,SAA6BC,GAEzBR,EAAYS,KAAKC,SAAS,OACtB,CAAEC,aAAcH,IAChB,SAAUI,GACFA,EAAcC,SAAWZ,OAAOa,kBAAkBC,UAclE,SAAoBP,EAAOQ,GAEvBhB,EAAYS,KAAKQ,SAASD,EAnCd,mJAoCR,CAAEL,aAAcH,EAAOU,aAAc,SACrC,SAAUC,GACFA,EAAcN,SAAWZ,OAAOa,kBAAkBC,UAClDI,EAAcR,aAAaS,UAAU,CAAEC,YAAY,KAEnDC,QAAQC,MAAM,4BACdJ,EAAcR,aAAaS,UAAU,CAAEC,YAAY,IAE3D,GAER,CA1BgBG,CAAWZ,EAAcD,aAAcC,EAAca,QAErDH,QAAQC,MAAM,4BACdX,EAAcD,aAAaS,UAAU,CAAEC,YAAY,IAE3D,GAER,G","sources":["webpack://onlive-microsoft-addin/./src/commands/commands.js"],"sourcesContent":["// 1. How to construct online meeting details.\n// Not shown: How to get the meeting organizer's ID and other details from your service.\nconst newBody = '<br>' +\n    '<a href=\"https://events-staging.onlive.site/event/71edc0d8-c99e-4b30-8c05-ebd5b5a71248\" target=\"_blank\">Join Onlive.site meeting</a>' +\n    '<br><br>';\n\nlet mailboxItem;\n\n// Office is ready.\nOffice.onReady(function () {\n        mailboxItem = Office.context.mailbox.item;\n    }\n);\n\n// 2. How to define and register a function command named `insertOnliveMeeting` (referenced in the manifest)\n//    to update the meeting body with the online meeting details.\nfunction insertOnliveMeeting(event) {\n    // Get HTML body from the client.\n    mailboxItem.body.getAsync(\"html\",\n        { asyncContext: event },\n        function (getBodyResult) {\n            if (getBodyResult.status === Office.AsyncResultStatus.Succeeded) {\n                updateBody(getBodyResult.asyncContext, getBodyResult.value);\n            } else {\n                console.error(\"Failed to get HTML body.\");\n                getBodyResult.asyncContext.completed({ allowEvent: false });\n            }\n        }\n    );\n}\n// Register the function.\nOffice.actions.associate(\"insertOnliveMeeting\", insertOnliveMeeting);\n\n// 3. How to implement a supporting function `updateBody`\n//    that appends the online meeting details to the current body of the meeting.\nfunction updateBody(event, existingBody) {\n    // Append new body to the existing body.\n    mailboxItem.body.setAsync(existingBody + newBody,\n        { asyncContext: event, coercionType: \"html\" },\n        function (setBodyResult) {\n            if (setBodyResult.status === Office.AsyncResultStatus.Succeeded) {\n                setBodyResult.asyncContext.completed({ allowEvent: true });\n            } else {\n                console.error(\"Failed to set HTML body.\");\n                setBodyResult.asyncContext.completed({ allowEvent: false });\n            }\n        }\n    );\n}"],"names":["mailboxItem","Office","onReady","context","mailbox","item","actions","associate","event","body","getAsync","asyncContext","getBodyResult","status","AsyncResultStatus","Succeeded","existingBody","setAsync","coercionType","setBodyResult","completed","allowEvent","console","error","updateBody","value"],"sourceRoot":""}